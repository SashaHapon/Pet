version: '4'

services:
  consumer:
    environment:
      KAFKA_HOST: ${KAFKA_HOST}
    build:
      context: consumer
      dockerfile: Dockerfile
    depends_on:
      - producer
    restart: unless-stopped
    networks:
      - common-network
    ports:
      - ${CONSUMER_PORT}:${CONSUMER_PORT}
  producer:
    environment:
      KAFKA_HOST: ${KAFKA_HOST}
    build:
      context: producer
      dockerfile: Dockerfile
    depends_on:
      - cloud-config
    restart: unless-stopped
    networks:
      - common-network
    ports:
      - ${PRODUCER_PORT}:${PRODUCER_PORT}
    extra_hosts:
      - "backend-keycloak-auth:host-gateway"
      - "backend-gateway-client:host-gateway"
  cloud-config:
    build:
      context: cloud-config-server
      dockerfile: cloud-config-server/Dockerfile
    depends_on:
      - kafka
    networks:
      - common-network
    ports:
      - ${CLOUD_CONFIG_PORT}:${CLOUD_CONFIG_PORT}

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - 22181:${ZOOKEEPER_CLIENT_PORT}
    networks:
      - common-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    networks:
      - common-network
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  postgres:
      image: postgres:latest
      restart: always
      depends_on:
        - cloud-config
      environment:
        - POSTGRES_PASSWORD=postgres
        - POSTGRES_USER=postgres
        - POSTGRES_DB=consumer_db
      ports:
        - 5432:5432
      networks:
        - common-network
      volumes:
        - postgres:/var/lib/postgresql/data

  db:
    image: postgres:latest
    environment:
#      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: my_admin
      POSTGRES_PASSWORD: my_password
      POSTGRES_DB: keycloak_db
    ports:
      - 5432:5432
    networks:
      - common-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
  kc:
    image: quay.io/keycloak/keycloak:21.1.1
    command: ["start-dev", "--import-realm", "--db=postgres", "--db-url=jdbc:postgresql://db:5432/keycloak_db", "--db-username=my_admin", "--db-password=my_password"]
    environment:
#      DB_VENDOR: POSTGRES
##      DB_ADDR: db
#      KC_DB_DATABASE: keycloak_db
#      KC_DB: postgres
#      KC_DB_USERNAME: my_admin
#      KC_DB_URL: "jdbc:postgresql://db:5432/keycloak_db"
#      KC_DB_SCHEMA: public
#      KC_DB_PASSWORD: my_password


      KEYCLOAK_HOSTNAME: backend-keycloak-auth
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
#      KEYCLOAK_USER: admin
#      KEYCLOAK_PASSWORD: admin
      KC_LOG_LEVEL: debug
      KC_LOG_CONSOLE_COLOR: true
      KC_LOG_CONSOLE_FORMAT: DEFAULT
      KC_LOG_CONSOLE_OUTPUT: stdout
      KC_IMPORT: /opt/keycloak/data/import/realm-export.json
    ports:
      - ${KEYCLOAK_PORT}:${KEYCLOAK_PORT}
    depends_on:
      - db
    volumes:
      - ./data/import:/opt/keycloak/data/import
    networks:
      - common-network
  backend-gateway-client:
    build:
      context: backend-gateway-client
      dockerfile: Dockerfile
    ports:
      - 8083:8083
    extra_hosts:
      - "backend-keycloak-auth:host-gateway"
      - "backend-resources:host-gateway"
    networks:
      - common-network
  backend-resources:
    build:
      context: backend-resources
      dockerfile: Dockerfile
    ports:
      - 8082:8082
    extra_hosts:
      - "backend-keycloak-auth:host-gateway"
      - "backend-gateway-client:host-gateway"
    networks:
      - common-network

volumes:
  postgres:
  postgres_data:

networks:
  common-network:
    driver: bridge